name: CI Load Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci-load-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Configure Multi-Node KinD Cluster
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
            - role: worker
            - role: worker
          EOF

      - name: Create Multi-Node KinD Cluster
        run: kind create cluster --name test-cluster --config kind-config.yaml

      - name: Verify Cluster Nodes
        run: kubectl get nodes

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s


      - name: Deploy HTTP Echo Services
        run: |
          # Create 'foo' deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-foo
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-foo
            template:
              metadata:
                labels:
                  app: http-echo-foo
              spec:
                containers:
                - name: http-echo
                  image: hashicorp/http-echo:0.2.3
                  args:
                  - "-text=foo"
                  ports:
                  - containerPort: 5678
          EOF

          # Expose 'foo' deployment as a service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-foo-service
          spec:
            selector:
              app: http-echo-foo
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF

          # Create 'bar' deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-bar
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-bar
            template:
              metadata:
                labels:
                  app: http-echo-bar
              spec:
                containers:
                - name: http-echo
                  image: hashicorp/http-echo:0.2.3
                  args:
                  - "-text=bar"
                  ports:
                  - containerPort: 5678
          EOF

          # Expose 'bar' deployment as a service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-bar-service
          spec:
            selector:
              app: http-echo-bar
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF

      - name: Configure Ingress Routing for foo.localhost and bar.localhost
        run: |
          # Ingress resource for foo.localhost
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: foo-ingress
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: foo.localhost
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: http-echo-foo-service
                      port:
                        number: 80
          EOF

          # Ingress resource for bar.localhost
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: bar-ingress
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: bar.localhost
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: http-echo-bar-service
                      port:
                        number: 80
          EOF

      - name: Delete KinD Cluster
        if: always()
        run: kind delete cluster --name test-cluster
