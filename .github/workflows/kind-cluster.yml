name: CI Load Test

on:
  pull_request:
    branches:
      - main

jobs:
  ci-load-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure Multi-Node KinD Cluster
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              kubeadmConfigPatches:
                - |
                  kind: InitConfiguration
                  nodeRegistration:
                    kubeletExtraArgs:
                      node-labels: "ingress-ready=true"
              extraPortMappings:
                - containerPort: 80
                  hostPort: 8080
                  protocol: TCP
                - containerPort: 443
                  hostPort: 8443
                  protocol: TCP
            - role: worker
            - role: worker
          EOF

      - name: Create Multi-Node KinD Cluster
        run: kind create cluster --name test-cluster --config kind-config.yaml

      - name: Verify Cluster Nodes
        run: kubectl get nodes

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.1/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=600s

      - name: Deploy HTTP Echo Services
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-foo
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-foo
            template:
              metadata:
                labels:
                  app: http-echo-foo
              spec:
                containers:
                  - name: http-echo
                    image: hashicorp/http-echo:0.2.3
                    args:
                      - "-text=foo"
                    ports:
                      - containerPort: 5678
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-foo-service
          spec:
            selector:
              app: http-echo-foo
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-bar
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-bar
            template:
              metadata:
                labels:
                  app: http-echo-bar
              spec:
                containers:
                  - name: http-echo
                    image: hashicorp/http-echo:0.2.3
                    args:
                      - "-text=bar"
                    ports:
                      - containerPort: 5678
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-bar-service
          spec:
            selector:
              app: http-echo-bar
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF

      - name: Configure Ingress Routing
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: foo-ingress
          spec:
            ingressClassName: nginx
            rules:
              - host: foo.localhost
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: http-echo-foo-service
                          port:
                            number: 80
          EOF
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: bar-ingress
          spec:
            ingressClassName: nginx
            rules:
              - host: bar.localhost
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: http-echo-bar-service
                          port:
                            number: 80
          EOF

      - name: Wait for Deployments to be Ready
        run: |
          kubectl wait --for=condition=available --timeout=120s deployment/http-echo-foo
          kubectl wait --for=condition=available --timeout=120s deployment/http-echo-bar

      - name: Update /etc/hosts
        run: |
          echo "127.0.0.1 foo.localhost bar.localhost" | sudo tee -a /etc/hosts

      - name: Install Hey for Load Testing
        run: |
          curl -Lo hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey
          sudo mv hey /usr/local/bin/hey

      - name: Test Connectivity
        run: |
          sleep 10
          curl -v -H "Host: foo.localhost" http://localhost:8080/
          curl -v -H "Host: bar.localhost" http://localhost:8080/

      - name: Generate Load Test and Capture Results
        run: |
          hey -z 30s -q 10 -host foo.localhost http://localhost:8080/ > foo_load_test.txt
          hey -z 30s -q 10 -host bar.localhost http://localhost:8080/ > bar_load_test.txt

      - name: Parse Load Test Results
        run: |
          parse_results() {
            file=$1
            output_file=$2
            echo "Results for $file" > $output_file
            avg_latency=$(grep '^Latency' $file | awk '{print $2}')
            requests_sec=$(grep 'Requests/sec' $file | awk '{print $2}')
            percent_90=$(grep '  90%' $file | awk '{print $2}')
            percent_95=$(grep '  95%' $file | awk '{print $2}')
            total_requests=$(grep '^Total:' $file | awk '{print $2}')
            failed_requests=$(grep 'Failed requests:' $file | awk '{print $3}')
            if [ -z "$failed_requests" ]; then
              failed_requests=0
            fi
            if [ -z "$total_requests" ]; then
              total_requests=0
            fi
            if [ "$total_requests" -eq 0 ]; then
              failed_percent=0
            else
              failed_percent=$(echo "scale=2; $failed_requests/$total_requests*100" | bc)
            fi
            echo "Average Latency: $avg_latency" >> $output_file
            echo "Requests/sec: $requests_sec" >> $output_file
            echo "90th Percentile Latency: $percent_90" >> $output_file
            echo "95th Percentile Latency: $percent_95" >> $output_file
            echo "Failed Requests: $failed_requests ($failed_percent%)" >> $output_file
          }
          parse_results foo_load_test.txt parsed_foo.txt
          parse_results bar_load_test.txt parsed_bar.txt

      - name: Comment Load Testing Results on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const fs = require('fs');
            const parsed_foo = fs.readFileSync('parsed_foo.txt', 'utf8');
            const parsed_bar = fs.readFileSync('parsed_bar.txt', 'utf8');
            const pr_comment = [
              '### Load Testing Results',
              '',
              '#### foo.localhost:',
              '',
              '```',
              parsed_foo,
              '```',
              '',
              '#### bar.localhost:',
              '',
              '```',
              parsed_bar,
              '```',
            ].join('\n');
            await github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: pr_comment,
            });

      - name: Delete KinD Cluster
        if: always()
        run: kind delete cluster --name test-cluster
