name: CI Load Test

on:
  pull_request:
    branches:
      - main

jobs:
  ci-load-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev git
          # Install KinD
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          # Install wrk
          git clone https://github.com/wg/wrk.git
          cd wrk
          make
          sudo cp wrk /usr/local/bin/

      - name: Configure Multi-Node KinD Cluster
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              kubeadmConfigPatches:
                - |
                  kind: InitConfiguration
                  nodeRegistration:
                    kubeletExtraArgs:
                      node-labels: "ingress-ready=true"
              extraPortMappings:
                - containerPort: 80
                  hostPort: 8080
                  protocol: TCP
                - containerPort: 443
                  hostPort: 8443
                  protocol: TCP
            - role: worker
            - role: worker
          EOF

      - name: Create Multi-Node KinD Cluster
        run: kind create cluster --name test-cluster --config kind-config.yaml

      - name: Verify Cluster Nodes
        run: kubectl get nodes

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.1/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=600s

      - name: Deploy HTTP Echo Services and Configure Ingress
        run: |
          for name in foo bar; do
            # Deploy the service
            cat <<EOF | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: http-echo-\$name
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: http-echo-\$name
              template:
                metadata:
                  labels:
                    app: http-echo-\$name
                spec:
                  containers:
                    - name: http-echo
                      image: hashicorp/http-echo:0.2.3
                      args:
                        - "-text=\$name"
                      ports:
                        - containerPort: 5678
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: http-echo-\$name-service
            spec:
              selector:
                app: http-echo-\$name
              ports:
                - protocol: TCP
                  port: 80
                  targetPort: 5678
            EOF

            # Configure Ingress
            cat <<EOF | kubectl apply -f -
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: \$name-ingress
            spec:
              ingressClassName: nginx
              rules:
                - host: \$name.localhost
                  http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: http-echo-\$name-service
                            port:
                              number: 80
            EOF
          done

      - name: Define Retry Function
        shell: bash
        run: |
          echo '
          retry() {
            local retries=\$1
            shift
            local count=0
            until "\$@"; do
              exit=\$?
              count=\$((count + 1))
              if [ \$count -lt \$retries ]; then
                echo "Retry \$count/\$retries failed, retrying in 5 seconds..."
                sleep 5
              else
                echo "Retry \$count/\$retries failed, no more retries left."
                return \$exit
              fi
            done
            return 0
          }
          ' >> \$BASH_ENV

      - name: Wait for Deployments to be Ready
        run: |
          source \$BASH_ENV
          for name in foo bar; do
            retry 5 kubectl wait --for=condition=available --timeout=60s deployment/http-echo-\$name
          done

      - name: Update /etc/hosts
        run: |
          echo "127.0.0.1 foo.localhost bar.localhost" | sudo tee -a /etc/hosts

      - name: Test Connectivity
        run: |
          source \$BASH_ENV
          sleep 10
          for name in foo bar; do
            retry 5 curl -v -H "Host: \$name.localhost" http://localhost:8080/
          done

      - name: Create wrk Lua Script
        run: |
          cat <<'EOF' > script.lua
          wrk.method = "GET"
          hosts = {"foo.localhost", "bar.localhost"}
          request = function()
            host = hosts[math.random(1, #hosts)]
            wrk.headers["Host"] = host
            return wrk.format(nil, "/")
          end
          EOF

      - name: Generate Randomized Load Test and Capture Results
        run: |
          wrk -t4 -c10 -d30s -s script.lua http://localhost:8080/ > load_test.txt

      - name: Parse Load Test Results
        run: |
          avg_latency=$(grep 'Latency' load_test.txt | awk '{print $2}')
          requests_sec=$(grep 'Requests/sec' load_test.txt | awk '{print $2}')
          errors=$(grep 'Socket errors' load_test.txt)
          echo "Average Latency: \$avg_latency" > parsed_results.txt
          echo "Requests/sec: \$requests_sec" >> parsed_results.txt
          echo "\$errors" >> parsed_results.txt

      - name: Comment Load Testing Results on PR
        uses: actions/github-script@v6
        with:
          github-token: \${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            const fs = require('fs');
            const parsed_results = fs.readFileSync('parsed_results.txt', 'utf8');
            const pr_comment = [
              '### Load Testing Results',
              '',
              '#### Randomized Traffic between foo.localhost and bar.localhost:',
              '',
              '```',
              parsed_results,
              '```',
            ].join('\n');
            await github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: pr_comment,
            });

      - name: Delete KinD Cluster
        if: always()
        run: kind delete cluster --name test-cluster
