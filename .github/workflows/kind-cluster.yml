name: CI Load Test

on:
  pull_request:
    branches:
      - main

jobs:
  ci-load-test:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Configure Multi-Node KinD Cluster
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
            - role: worker
            - role: worker
          EOF

      - name: Create Multi-Node KinD Cluster
        run: kind create cluster --name test-cluster --config kind-config.yaml

      - name: Verify Cluster Nodes
        run: kubectl get nodes

      - name: Deploy NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Deploy HTTP Echo Services
        run: |
          # Create 'foo' deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-foo
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-foo
            template:
              metadata:
                labels:
                  app: http-echo-foo
              spec:
                containers:
                - name: http-echo
                  image: hashicorp/http-echo:0.2.3
                  args:
                  - "-text=foo"
                  ports:
                  - containerPort: 5678
          EOF

          # Expose 'foo' deployment as a service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-foo-service
          spec:
            selector:
              app: http-echo-foo
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF

          # Create 'bar' deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: http-echo-bar
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: http-echo-bar
            template:
              metadata:
                labels:
                  app: http-echo-bar
              spec:
                containers:
                - name: http-echo
                  image: hashicorp/http-echo:0.2.3
                  args:
                  - "-text=bar"
                  ports:
                  - containerPort: 5678
          EOF

          # Expose 'bar' deployment as a service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: http-echo-bar-service
          spec:
            selector:
              app: http-echo-bar
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5678
          EOF

      - name: Configure Ingress Routing for foo.localhost and bar.localhost
        run: |
          # Ingress resource for foo.localhost
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: foo-ingress
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: foo.localhost
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: http-echo-foo-service
                      port:
                        number: 80
          EOF

          # Ingress resource for bar.localhost
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: bar-ingress
            namespace: default
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: bar.localhost
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: http-echo-bar-service
                      port:
                        number: 80
          EOF

      - name: Install Hey for Load Testing
        run: |
          curl -Lo hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey
          sudo mv hey /usr/local/bin/hey

      - name: Generate Load Test and Capture Results
        run: |
          hey -z 30s -q 10 -host foo.localhost http://localhost > foo_load_test.txt
          hey -z 30s -q 10 -host bar.localhost http://localhost > bar_load_test.txt

      - name: Parse Load Test Results
        id: parse_results
        run: |
          parse_results() {
            echo "Results for $1"
            avg_latency=$(grep 'Latency' $1 | awk '{print $2}')
            requests_sec=$(grep 'Requests/sec' $1 | awk '{print $2}')
            percent_90=$(grep '90%' $1 | awk '{print $2}')
            percent_95=$(grep '95%' $1 | awk '{print $2}')
            total_requests=$(grep 'Requests' $1 | awk '{print $3}')
            failed_requests=$(grep 'Failed' $1 | awk '{print $2}')
            failed_percent=$(echo "scale=2; $failed_requests/$total_requests*100" | bc)
            echo "Average Latency: $avg_latency"
            echo "Requests/sec: $requests_sec"
            echo "90th Percentile Latency: $percent_90"
            echo "95th Percentile Latency: $percent_95"
            echo "Failed Requests: $failed_requests ($failed_percent%)"
          }
          parse_results foo_load_test.txt > parsed_foo.txt
          parse_results bar_load_test.txt > parsed_bar.txt
          echo "Parsed load test results saved."

      - name: Comment Load Testing Results on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_comment="### Load Testing Results\n\n"
          pr_comment+="#### foo.localhost:\n\n\`\`\`\n$(cat parsed_foo.txt)\n\`\`\`\n\n"
          pr_comment+="#### bar.localhost:\n\n\`\`\`\n$(cat parsed_bar.txt)\n\`\`\`\n\n"
          echo "$pr_comment" | gh pr comment ${{ github.event.pull_request.number }} --body -

      - name: Delete KinD Cluster
        if: always()
        run: kind delete cluster --name test-cluster